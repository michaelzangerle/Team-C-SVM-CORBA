#ifndef _CTOTeam
    #include <cto/CTOTeam.idl>
    #define _CTOTeam
#endif
#ifndef _CTOMatch
    #include <cto/CTOMatch.idl>
    #define _CTOMatch
#endif
#ifndef _CTOContest
    #include <cto/CTOContest.idl>
    #define _CTOContest
#endif
#ifndef  _RegisterException
    #include <exceptions/RegisterException.idl>
    #define _RegisterException
#endif

module svm { module corba { module abstraction {
    module sequences {
        struct Teams {
            sequence<cto::team::CTOTeam> teams;
        };
        struct Contests {
            sequence<cto::contest::CTOContest> contests;
        };
        struct Matches {
            sequence<cto::match::CTOMatch> matches;
        };
    };
    interface SVMExport {
        sequences::Teams getListOfTeams() raises (exceptions::RegisterException);
        sequences::Contests getListOfContestsByDate(in long long date) raises (exceptions::RegisterException);
        sequences::Contests getListOfContestsByTeam(in cto::team::CTOTeam team) raises (exceptions::RegisterException);
        sequences::Matches getListOfMatches(in cto::contest::CTOContest contest) raises (exceptions::RegisterException);
    };
}; }; };